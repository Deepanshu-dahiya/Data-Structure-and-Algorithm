/*Given a string, we have to find out all subsequences of it.
 A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.*/

 #include<bits/stdc++.h>
 using namespace std;
void helper(string input,string output){
    if(input.length()==0)
    {
        cout<<output<<" ";
        return ;
    }
    helper(input.substr(1),output+input[0]);
    helper(input.substr(1),output);
}

void printSubSeqRec(string str, int n, int index = -1,string curr = "")
{
	// base case
	if (index == n)
		return;

	if (!curr.empty()) {
		cout << curr << "\n";
	}

	for (int i = index + 1; i < n; i++) {

		curr += str[i];
		printSubSeqRec(str, n, i, curr);

		// backtracking
		curr = curr.erase(curr.size() - 1);
	}
	return;
}

// Generates power set in lexicographic
// order.
void printSubSeq(string str)
{
	printSubSeqRec(str, str.size());
}

 void printSubsequence(string ss){
 string ouput="";
 helper(ss,ouput);
 }


 int main(){
 string ss;cout<<"input string "<<endl;
 cin>>ss;
 cout<<"output string using pick and don't pick technique "<<endl;
 printSubsequence(ss);



 cout<<"Output using fixing one character at a time "<<endl;
 printSubSeq(ss);
 return 0;
 }
